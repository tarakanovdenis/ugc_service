[uwsgi]

# предотвращает запуск сервера, если он неправильно настроен
strict = true
# порт, на котором принимаются запросы пользователей
socket = :8000
protocol = http

# запустить мастер-процесс для управления дочерними процессами
master = true

# завершить все дочерние процессы
no-orphans = true

# остановить сервер при получении сигнала SIGTERM
die-on-term = true

# не использовать несколько интерпретаторов (там, где это возможно)
single-interpreter = true

# ленивая инициализация приложения
# это позволяет запускать сервер быстрее
# первый запрос, полученный процессом, будет работать медленно
# так как приложение будет инициализироваться
lazy-apps = true

# количество процессов, создаваемое мастер-процессом
# рекомендуется поставить число, не превышающее количество 
# доступных ядер процессора
processes = $(UWSGI_PROCESSES)

# количество потоков, используемых каждым процессом
# каждый запрос от пользователя обрабатывается в отдельном потоке
# с помощью этих настроек можно установить максимальное количество 
# обрабатываемых запросов в этой конфигурации сервер сможет 
# обработать 32 запроса одновременно это число получили, умножив 
# количество прцоессов на количество потоков
threads = $(UWSGI_THREADS)

# по умолчанию uWSGI не инициирует GIL, поэтому потоки не будут 
# работать внутри приложения
enable-threads = true

# через какое количество запросов перезапустить воркер
# это полезно для профилактики утечек памяти
max-requests = 5000

# выход, если ни одно приложение не может быть загружено
need-app = true

# через сколько секунд принудительно завершить запрос от пользователя
harakiri = $(UWSGI_HARAKIRI)
harakiri-verbose = true

# очистить временные файлы и UNIX-сокеты, используемые сервером
vacuum = true


# максимальное время, которое может потребоваться воркеру,
# чтобы перезагрузиться/выключиться (по умолчанию 60)
worker-reload-mercy = 60

# как долго ждать обработки текущих запросов воркером
# до принудительной перезагрузки
reload-mercy = 10

# изменение директории до указанной до загрузки приложения
chdir = /opt/app

# путь до wsgi-файла, сгенерированного Django
wsgi-file = config/wsgi.py

# перезагрузить uWSGI, если указанный файл изменен
touch-reload = config/settings.py

# отслеживание mtime python модулей для запуска перезагрузки
# (использовать только при разработке)
py-autoreload = 1

# прежде чем передавать запрос приложению
# uWSGI считает в памяти его содержимое
post-buffering = 1048576

# размер буфера для чтения HTTP-заголовков
buffer-size = 65535

# принудительно перезагрузить воркер, если он превысит порог по потребляемой памяти
reload-on-rss = 1024

# каталоги статических файлов
static-map = /static=/var/wwww/static
static-map = /media=/var/wwww/media
